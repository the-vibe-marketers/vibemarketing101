{
  "name": "Reddit worflow - Identify reddit posts and come up with content ideas",
  "nodes": [
    {
      "parameters": {
        "operation": "search",
        "subreddit": "MarketingAutomation",
        "keyword": "\"marketing workflow\"",
        "limit": 10,
        "additionalFields": {
          "sort": "hot"
        }
      },
      "type": "n8n-nodes-base.reddit",
      "typeVersion": 1,
      "position": [
        -1260,
        -600
      ],
      "id": "ccde2725-7c62-4342-be3f-37f2a42e4099",
      "name": "Reddit",
      "credentials": {
        "redditOAuth2Api": {
          "id": "AkR3q4gk7Uh4mdzO",
          "name": "Reddit account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your task is to read the Reddit post content (provided as `{{ $json.selftext }}`) and output the following fields for each Reddit post:\n\n---\n\n1. **Reddit Post Summary**  \nSummarize the original Reddit post in 1 sentence.\n\n2. **Theme**  \nWhat is the main idea or recurring topic?\n\n3. ** Points from each reddit post**   \nWhat are they saying in the post break them down as pointers"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -780,
        -380
      ],
      "id": "dc93705f-b692-451f-bf8f-7d60ab58ed4c",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Based on {{ $json.selftext }} for {{ $json.reddit_summary }}\n\nCan you come up with Content idea themes along with what each idea theme should entail as pointers?"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        500,
        -400
      ],
      "id": "95f65927-7976-40c9-9ddf-e90b0f4397a6",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "grok-2-1212",
          "mode": "list",
          "cachedResultName": "grok-2-1212"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -820,
        -180
      ],
      "id": "d84fc0cc-98bd-42a0-88bd-43abbbc2eeed",
      "name": "Grok ",
      "credentials": {
        "openAiApi": {
          "id": "PDNGD4MqaJ0In0l8",
          "name": "OpenAi account 4"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        480,
        -180
      ],
      "id": "966df69a-dbf1-4212-9bc4-8ecb547d7c7f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Hi02E391flxREeCL",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c5ae5b2c-f349-4f88-8ae9-d489cec4a695",
              "name": "row_number",
              "value": "={{ $itemIndex + 1 }}",
              "type": "string"
            },
            {
              "id": "5714f82e-7c40-476f-81e4-ae033bff6179",
              "name": "Content theme",
              "value": "={{ $json.text.split('\\n').slice(1).join('\\n') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        840,
        -420
      ],
      "id": "fe6c7eea-c67e-4e69-aa5f-55fa0fb9c623",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        960,
        -740
      ],
      "id": "abe6f67f-1bdc-49ca-beb7-849f78a9c123",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "139vd5OTmFbdhOO8CS1fhkdMR4UlH_i6TLmG8ClsD4HY",
          "mode": "list",
          "cachedResultName": "Reddit to x ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139vd5OTmFbdhOO8CS1fhkdMR4UlH_i6TLmG8ClsD4HY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1566594335,
          "mode": "list",
          "cachedResultName": "Reddit posts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139vd5OTmFbdhOO8CS1fhkdMR4UlH_i6TLmG8ClsD4HY/edit#gid=1566594335"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Reddit post": "={{ $json.selftext }}",
            "Title": "={{ $json.title }}",
            "Reddit Summary": "={{ $json.reddit_summary }}",
            "Theme": "={{ $json.theme }}",
            "Subreddit": "={{ $json.subreddit }}",
            "Points from each reddit post": "={{ $json.points }}",
            "Content theme ": "={{ $json['Content theme'] }}"
          },
          "matchingColumns": [
            "Reddit post"
          ],
          "schema": [
            {
              "id": "Reddit post",
              "displayName": "Reddit post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Subreddit",
              "displayName": "Subreddit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Reddit Summary",
              "displayName": "Reddit Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Theme",
              "displayName": "Theme",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Points from each reddit post",
              "displayName": "Points from each reddit post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Content theme ",
              "displayName": "Content theme ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Hooks and angles",
              "displayName": "Hooks and angles",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Blog post idea",
              "displayName": "Blog post idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Brand voice",
              "displayName": "Brand voice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Linkedin post",
              "displayName": "Linkedin post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Blog post",
              "displayName": "Blog post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Feedback",
              "displayName": "Feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Updated post with feedback",
              "displayName": "Updated post with feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1200,
        -400
      ],
      "id": "4c552f14-6e7e-43b2-8599-5bf647efd3e1",
      "name": "Google Sheets1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Q2cp9Pj98wDxvTr5",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Based on the {{ $json['Content theme '] }} \n\nCan you just come up with hooks and angles to explore for those themes \n\ncome up with strong angles and reasons "
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1520,
        -360
      ],
      "id": "16b5b595-f56c-4e03-b212-c12d2c8b8f3f",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "model": "anthropic/claude-3.7-sonnet",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1540,
        -140
      ],
      "id": "ef21ce6b-166e-43be-9629-aef39f922930",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "ivGoi3noYVsN6lRZ",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4bd1901a-b827-43f9-8f44-47469a1b536c",
              "name": "row_number",
              "value": "={{ $itemIndex + 1 }}",
              "type": "string"
            },
            {
              "id": "6e6b5920-8ce2-44b8-92fd-278a334c0f4f",
              "name": "Hooks",
              "value": "={{ $json.text.split('\\n').slice(1).join('\\n') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        -400
      ],
      "id": "eeb24043-54e6-4c5d-b4fd-d98e311cf0cf",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "139vd5OTmFbdhOO8CS1fhkdMR4UlH_i6TLmG8ClsD4HY",
          "mode": "list",
          "cachedResultName": "Reddit to x ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139vd5OTmFbdhOO8CS1fhkdMR4UlH_i6TLmG8ClsD4HY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1566594335,
          "mode": "list",
          "cachedResultName": "Reddit posts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139vd5OTmFbdhOO8CS1fhkdMR4UlH_i6TLmG8ClsD4HY/edit#gid=1566594335"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Hooks and angles": "={{ $json.Hooks }}",
            "Content theme ": "={{ $json['Content theme '] }}",
            "Points from each reddit post": "={{ $json['Points from each reddit post'] }}",
            "Subreddit": "={{ $json.Subreddit }}",
            "Theme": "={{ $json.Theme }}",
            "Reddit Summary": "={{ $json['Reddit Summary'] }}",
            "Title": "={{ $json.Title }}",
            "Reddit post": "={{ $json['Reddit post'] }}"
          },
          "matchingColumns": [
            "Reddit post"
          ],
          "schema": [
            {
              "id": "Reddit post",
              "displayName": "Reddit post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Subreddit",
              "displayName": "Subreddit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Reddit Summary",
              "displayName": "Reddit Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Theme",
              "displayName": "Theme",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Points from each reddit post",
              "displayName": "Points from each reddit post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Content theme ",
              "displayName": "Content theme ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Hooks and angles",
              "displayName": "Hooks and angles",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Blog post idea",
              "displayName": "Blog post idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Linkedin post idea",
              "displayName": "Linkedin post idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Linkedin post",
              "displayName": "Linkedin post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Blog post",
              "displayName": "Blog post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Feedback",
              "displayName": "Feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Updated post with feedback",
              "displayName": "Updated post with feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2300,
        -700
      ],
      "id": "e9abf00c-a979-498e-8334-6b0c2bd0b5ef",
      "name": "Google Sheets2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Q2cp9Pj98wDxvTr5",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1500,
        -600
      ],
      "id": "b9901e46-6d43-4a36-a5b1-684f82c6db9f",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "jsCode": "const inputs = $input.all();\n\nconst extract = (text, labelOptions) => {\n  for (const label of labelOptions) {\n    const regex = new RegExp(\n      `(?:\\\\*\\\\*|##)?\\\\s*${label}\\\\s*(?:\\\\*\\\\*|##)?\\\\s*[:：]?\\\\s*\\\\n?([\\\\s\\\\S]*?)(\\\\n{2,}|\\\\n\\\\*\\\\*|---|$)`,\n      'i'\n    );\n    const match = text.match(regex);\n    if (match) return match[1].trim();\n  }\n  return null;\n};\n\nreturn inputs.map(item => {\n  const text = (item.json.text || \"\").trim();\n  const result = {};\n\n  const redditSummary = extract(text, [\n    \"Reddit Post Summary\",\n    \"Reddit summary\",\n    \"Summary\",\n    \"Post summary\"\n  ]);\n\n  const theme = extract(text, [\n    \"Theme\",\n    \"Topic\",\n    \"Main Idea\"\n  ]);\n\n  const points = extract(text, [\n    \"Points from the Reddit post\",\n    \"Points from each Reddit post\",\n    \"Points\",\n    \"Takeaways\",\n    \"Insights\",\n    \"Highlights\"\n  ]);\n\n  if (redditSummary) result.reddit_summary = redditSummary;\n  if (theme) result.theme = theme;\n  if (points) result.points = points;\n\n  return { json: result };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        -380
      ],
      "id": "143aa48d-1774-4979-9d29-43c54acbe46b",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const inputs = $input.all();\n\nreturn inputs.map(item => {\n  const { title, selftext, subreddit } = item.json;\n\n  // Skip entries with no title or selftext\n  if (!title || !selftext || selftext.trim() === \"\") {\n    return null;\n  }\n\n  return {\n    json: {\n      title,\n      selftext,\n      subreddit\n    }\n  };\n}).filter(Boolean); // Remove nulls\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1020,
        -600
      ],
      "id": "e94373c5-9790-4756-ad01-81db9f7f5cf9",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -160,
        -440
      ],
      "id": "455dccf3-e919-4a0f-87c8-0112bbd60aba",
      "name": "Merge1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        2060,
        -700
      ],
      "id": "e3afcbe4-05cf-4afd-ac6e-8183ca879120",
      "name": "Merge2"
    }
  ],
  "pinData": {},
  "connections": {
    "Reddit": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Grok ": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Reddit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Google Sheets2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "46264bb6-7ebe-4690-8cd1-baefce0a5d80",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "74f05c1cebd184a5d02e9c4c7deeeee0b4b4c089b73d63fe289d2b9014d64811"
  },
  "id": "Ai1a2oQ2iQPjjEEy",
  "tags": []
}